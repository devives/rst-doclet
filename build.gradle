plugins {
    id 'java-library'
    id "com.github.hierynomus.license" version "0.16.1"
    id 'maven-publish'
    id 'signing'
}

group = 'com.devives'
archivesBaseName = "devive-rst-doclet"
version = '0.2.0'

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

javadoc.options.encoding = "UTF-8"
javadoc.failOnError = false

repositories {
    flatDir {
        dirs System.getenv('JAVA_HOME').toString() + '/lib/'
    }
    mavenLocal()
    mavenCentral()
}

configurations {
    javadocOnly
    rstDoclet
}

dependencies {
    // https://docs.gradle.org/current/userguide/java_library_plugin.html#java_library_plugin
    compileOnly project(path: ':rst-document')
    compileOnly project(path: ':rst-document-for-sphinx')
    compileOnly 'org.jsoup:jsoup:1.15.3'
    compileOnly ':tools:'

    rstDoclet project(path: ':rst-doclet')
    rstDoclet ':tools:'

    javadocOnly project(path: ':rst-doclet')
    javadocOnly ':tools:'

    testImplementation project(path: ':rst-document')
    testImplementation project(path: ':rst-document-for-sphinx')
    testImplementation ':tools:'
    testImplementation 'org.jsoup:jsoup:1.15.3'
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.platform:junit-platform-suite'
}

java {
    withJavadocJar()
    withSourcesJar()
}

var manifest = manifest {
    attributes = [
            "Manifest-Version"      : "1.0",
            "Name"                  : "com/devives/rstdoclet",
            "Specification-Title"   : "RstDoclet for JavaDoc Tool, generating reStructuredText for Sphinx",
            "Specification-Version" : "$project.version",
            "Specification-Vendor"  : "Vladimir Ivanov",
            "Implementation-Title"  : "com.devives.rstdoclet",
            "Implementation-Version": "$project.version",
            "Implementation-Vendor" : "Vladimir Ivanov",
            "Build-Date"            : new Date().format("yyyy-MM-dd HH:mm:ss (Z)"),
            "X-Compile-Source-JDK"  : "$sourceCompatibility",
            "X-Compile-Target-JDK"  : "$targetCompatibility"
    ]
}

jar {
    setManifest(manifest)

    archiveAppendix = 'jdk8-all'
    from {
        // Collect fat jar, excluding 'tools.jar'
        configurations.compileClasspath
                .filter { it.toString().endsWith('tools.jar') ? null : it }
                .collect { it.isDirectory() ? it : zipTree(it) }
    }
    into("META-INF/maven/$project.group/$project.name") {
        from { generatePomFileForRstDocletPublication }
        rename ".*", "pom.xml"
    }

    into("META-INF") {
        from { "LICENSE-GPL-2.0" }
    }
}

sourcesJar {
    setManifest(manifest)

    into("META-INF/maven/$project.group/$project.name") {
        from { generatePomFileForRstDocletPublication }
        rename ".*", "pom.xml"
    }

    into("META-INF") {
        from { "LICENSE-GPL-2.0" }
    }
}

license {
    header project.file('codequality/HEADER')
    strictCheck true
    exclude("**/com/devives/rstdoclet/html2rst/jdkloans/**")
}

publishing {
    publications {
        RstDoclet(MavenPublication) {
            from components.java
            pom {
                packaging = "jar"
                artifactId = archivesBaseName + '-jdk8-all'
                url = "https://github.com/devives/rst-doclet"
                description = "Doclet for JavaDoc Tool, generating reStructuredText for Sphinx."

                properties = [
                        "project.build.sourceEncoding": "UTF-8"
                ]

                organization {
                    name = "DEVIVES"
                    url = "https://github.com/devives"
                }

                licenses {
                    license {
                        name = "GNU General Public License Version 2.0"
                        url = "https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt"
                    }
                }

                scm {
                    connection = "scm:https://github.com/devives/rst-doclet.git"
                    developerConnection = "scm:git@github.com:devives/rst-doclet.git"
                    url = "https://github.com/devives/rst-doclet"
                }

                developers {
                    developer {
                        id = "ivvlev"
                        name = "Vladimir Ivanov"
                        email = "ivvlev@devives.com"
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = 'buildRepo'
            url = layout.buildDirectory.dir("repo")
        }
    }
}

signing {
    sign publishing.publications.RstDoclet
}


test {
    useJUnitPlatform()
}


tasks.register('javadoc2rst', Javadoc) {
    description = 'Generate rst files based on javadoc comments in code.'
    group = 'documentation'
    source = sourceSets.main.allJava
    classpath = configurations.javadocOnly
    destinationDir = file("$docsDir/javadoc2rst")
    options.docletpath = configurations.rstDoclet.files.asType(List)
    options.doclet = "com.devives.rstdoclet.RstDoclet"
    options.encoding = "UTF-8"
    options.showFromPackage()
    failOnError = false
    (options as CoreJavadocOptions).addStringOption("packageindexfilename", "package-summary")
}
