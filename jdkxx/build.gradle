plugins {
    id 'java-library'
    id "com.github.hierynomus.license" version "0.16.1"
}

group = 'com.devives'
archivesBaseName = "devive-rst-doclet-jdk1x"
version = '0.4.0'

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

javadoc.options.encoding = "UTF-8"
javadoc.failOnError = false

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
        vendor = JvmVendorSpec.BELLSOFT
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
}

dependencies {
    // Why `compileOnly` instead `api`?
    // We build a fat jar. `compileOnly` dependencies will no be added to pom.xml.
    compileOnly 'com.devives:devive-rst-document:0.2.0'
    //compileOnly project(path: ':rst-document')
    compileOnly 'com.devives:devive-rst-doc4sphinx:0.2.0'
    //compileOnly project(path: ':rst-document-for-sphinx')
    compileOnly project(path: ':html2rst')
    compileOnly project(path: ':javasphinx')
    compileOnly 'org.jsoup:jsoup:1.15.3'

    testImplementation 'com.devives:devive-rst-document:0.2.0'
    //testImplementation project(path: ':rst-document')
    testImplementation 'com.devives:devive-rst-doc4sphinx:0.2.0'
    //testImplementation project(path: ':rst-document-for-sphinx')
    testImplementation project(path: ':html2rst')
    testImplementation project(path: ':javasphinx')
    testImplementation 'org.jsoup:jsoup:1.15.3'
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.platform:junit-platform-suite'
}

java {
    withJavadocJar()
    withSourcesJar()
}

license {
    header project.file('./../codequality/HEADER')
    strictCheck true
}

List<String> exportsList = [
        '--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
        '--add-exports=jdk.javadoc/jdk.javadoc.internal.doclets.toolkit=ALL-UNNAMED',
        '--add-exports=jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.taglets=ALL-UNNAMED',
        '--add-exports=jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.util=ALL-UNNAMED',
        '--add-exports=jdk.javadoc/jdk.javadoc.internal.doclets.formats.html=ALL-UNNAMED',
        '--add-exports=jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.markup=ALL-UNNAMED',
]

List<String> testExportsList = [
        '--add-exports=jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED',
]

List<String> opensList = [
]

test {
    useJUnitPlatform()
    jvmArgs += exportsList + testExportsList + opensList
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += exportsList + testExportsList
}


tasks.withType(Javadoc).configureEach {
    options {
        addMultilineStringsOption("-add-exports").setValue(exportsList.collect { it.replace("--add-exports=", "") })
    }
}
