plugins {
    id 'java'
}

group = 'com.devives'
version = '0.2.0'

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

javadoc.options.encoding = "UTF-8"
javadoc.failOnError = false

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.BELLSOFT
    }
}

sourceSets {
    main {
        java {
            srcDirs './../../../samples/src/main/java8/', './../../../samples/src/main/java11/', './../../../samples/src/main/java17/'
        }
    }
}

repositories {
    mavenLocal()
//    mavenCentral()
}

configurations {
    rstDoclet
}

dependencies {
    rstDoclet("com.devives:devive-rst-doclet-jdk17-all:0.4.0")
}

List<String> exportsList = [
        '--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
        '--add-exports=jdk.javadoc/jdk.javadoc.internal.doclets.toolkit=ALL-UNNAMED',
        '--add-exports=jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.taglets=ALL-UNNAMED',
        '--add-exports=jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.util=ALL-UNNAMED',
        '--add-exports=jdk.javadoc/jdk.javadoc.internal.doclets.formats.html=ALL-UNNAMED',
        '--add-exports=jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.markup=ALL-UNNAMED',
]

tasks.register('clean-javadoc4sphinx', Delete) {
    group = 'documentation'
    delete file("$docsDir/javadoc4sphinx")
}

tasks.register('javadoc4sphinx', Javadoc) {
    dependsOn('clean-javadoc4sphinx')
    description = 'Generate rst files based on javadoc comments in code.'
    group = 'documentation'
    source = sourceSets.main.allJava
    classpath = configurations.compileClasspath
    destinationDir = file("$docsDir/javadoc4sphinx")
    options.docletpath = configurations.rstDoclet.files.asType(List)
    options.doclet = "com.devives.rstdoclet.RstDoclet"
    options.encoding = "UTF-8"
    options.showFromPackage()
    failOnError = false
    (options as CoreJavadocOptions).addStringOption("packageindexfilename", "package-index")
    (options as CoreJavadocOptions).setJFlags(exportsList)
}

tasks.register('clean-sphinx-source', Delete) {
    group = 'documentation-sphinx'
    delete file("$projectDir/sphinx/source/javadoc/")
}
tasks.register('copy-rst-to-sphinx-source', Copy) {
    dependsOn(javadoc4sphinx, 'clean-sphinx-source')
    description = 'Coping rst-files, generated by task `javadoc4sphinx`, to the sphinx working directory.'
    group = 'documentation-sphinx'
    from(file("$docsDir/javadoc4sphinx"))
    into(file("$projectDir/sphinx/source/javadoc"))
    exclude('**/com/devives/samples/internals/**')
    finalizedBy('sphinx-make-html')
}

tasks.register('sphinx-clean', Exec) {
    description = 'Clean Sphinx\'s `build` directory.'
    group = 'documentation-sphinx'
    workingDir = file('./sphinx/')
    // on windows:
    commandLine = ['cmd', '/c', 'make.bat']
    // on linux
    // commandLine './make.sh'
    args('clean')
}

tasks.register('sphinx-make-html', Exec) {
    dependsOn('copy-rst-to-sphinx-source', 'sphinx-clean')
    description = 'Execute sphinx\'s `make.bat html` for generated rts-files.'
    group = 'documentation-sphinx'
    workingDir = file('./sphinx/')
    // on windows:
    commandLine = ['cmd', '/c', 'make.bat']
    // on linux
    // commandLine './make.sh'
    args('html')
}
